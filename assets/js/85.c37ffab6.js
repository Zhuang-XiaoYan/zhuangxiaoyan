(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{694:function(e,t,v){"use strict";v.r(t);var _=v(25),r=Object(_.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"athena-mall-front面试总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#athena-mall-front面试总结"}},[e._v("#")]),e._v(" Athena-Mall-Front面试总结")]),e._v(" "),v("h2",{attrs:{id:"一、对于mvvm的理解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、对于mvvm的理解"}},[e._v("#")]),e._v(" 一、对于MVVM的理解？")]),e._v(" "),v("p",[e._v("MVVM 是 Model-View-ViewModel 的缩写。")]),e._v(" "),v("ul",[v("li",[e._v("Model代表数据模型，也可以在Model中定义数据修改和操作的业务逻辑。")]),e._v(" "),v("li",[e._v("View 代表UI 组件，它负责将数据模型转化成UI 展现出来。")]),e._v(" "),v("li",[e._v("ViewModel 监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步View 和 Model的对象，连接Model和View。")])]),e._v(" "),v("p",[e._v("在MVVM架构下，View 和 Model 之间并没有直接的联系，而是通过ViewModel进行交互，Model 和 ViewModel 之间的交互是双向的，\n因此View 数据的变化会同步到Model中，而Model 数据的变化也会立即反应到View 上。")]),e._v(" "),v("p",[e._v("ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而View 和 Model 之间的同步工作完全是自动的，无需人为干涉，\n因此开发者只需关注业务逻辑，不需要手动操作DOM, 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。")]),e._v(" "),v("h2",{attrs:{id:"二、vue的生命周期"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、vue的生命周期"}},[e._v("#")]),e._v(" 二、Vue的生命周期")]),e._v(" "),v("ol",[v("li",[e._v("beforeCreate（创建前） 在数据观测和初始化事件还未开始")]),e._v(" "),v("li",[e._v("created（创建后） 完成数据观测，属性和方法的运算，初始化事件，$el属性还没有显示出来")]),e._v(" "),v("li",[e._v("beforeMount（载入前） 在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。注意此时还没有挂载html到页面上。")]),e._v(" "),v("li",[e._v("mounted（载入后） 在el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html页面中。此过程中进行ajax交互。")]),e._v(" "),v("li",[e._v("beforeUpdate（更新前） 在数据更新之前调用，发生在虚拟DOM重新渲染和打补丁之前。可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程。")]),e._v(" "),v("li",[e._v("updated（更新后） 在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。")]),e._v(" "),v("li",[e._v("beforeDestroy（销毁前） 在实例销毁之前调用。实例仍然完全可用。")]),e._v(" "),v("li",[e._v("destroyed（销毁后） 在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。")])]),e._v(" "),v("p",[v("strong",[e._v("什么是vue生命周期？")]),e._v("\n答： Vue 实例从创建到销毁的过程，就是生命周期。从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、销毁等一系列过程，称之为 Vue 的生命周期。")]),e._v(" "),v("p",[v("strong",[e._v("vue生命周期的作用是什么？")]),e._v("\n答：它的生命周期中有多个事件钩子，让我们在控制整个Vue实例的过程时更容易形成好的逻辑。")]),e._v(" "),v("p",[v("strong",[e._v("vue生命周期总共有几个阶段？")]),e._v("\n答：它可以总共分为8个阶段：创建前/后, 载入前/后,更新前/后,销毁前/销毁后。")]),e._v(" "),v("p",[v("strong",[e._v("第一次页面加载会触发哪几个钩子？")]),e._v("\n答：会触发 下面这几个beforeCreate, created, beforeMount, mounted 。")]),e._v(" "),v("p",[v("strong",[e._v("DOM 渲染在 哪个周期中就已经完成？")]),e._v("\n答：DOM 渲染在 mounted 中就已经完成了。")]),e._v(" "),v("h2",{attrs:{id:"三、vue数据双向绑定"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三、vue数据双向绑定"}},[e._v("#")]),e._v(" 三、Vue数据双向绑定")]),e._v(" "),v("p",[e._v("vue实现数据双向绑定主要是：采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty（）来劫持各个属性的setter，getter，\n在数据变动时发布消息给订阅者，触发相应监听回调。当把一个普通 Javascript 对象传给 Vue 实例来作为它的 data 选项时，Vue 将遍历它的属性，\n用 Object.defineProperty 将它们转为 getter/setter。用户看不到 getter/setter，但是在内部它们让 Vue 追踪依赖，在属性被访问和修改时通知变化。")]),e._v(" "),v("p",[e._v("vue的数据双向绑定 将MVVM作为数据绑定的入口，整合Observer，Compile和Watcher三者，通过Observer来监听自己的model的数据变化，\n通过Compile来解析编译模板指令（vue中是用来解析 {{}}），最终利用watcher搭起observer和Compile之间的通信桥梁，达到数据变化 —>视图更新；\n视图交互变化（input）—>数据model变更双向绑定效果。")]),e._v(" "),v("h2",{attrs:{id:"四、vue组件间的参数传递"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#四、vue组件间的参数传递"}},[e._v("#")]),e._v(" 四、Vue组件间的参数传递")]),e._v(" "),v("ol",[v("li",[e._v("父组件与子组件传值")])]),e._v(" "),v("ul",[v("li",[e._v("父组件传给子组件：子组件通过props方法接受数据;")]),e._v(" "),v("li",[e._v("子组件传给父组件：$emit方法传递参数")])]),e._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[e._v("非父子组件间的数据传递，")])]),e._v(" "),v("ul",[v("li",[e._v("兄弟组件传值eventBus，就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件。项目比较小时，用这个比较合适。")]),e._v(" "),v("li",[e._v("如果是项目比较大，可采用vuex来进行数据管理")])]),e._v(" "),v("h2",{attrs:{id:"五、vue的路由模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#五、vue的路由模式"}},[e._v("#")]),e._v(" 五、Vue的路由模式")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("hash模式：在浏览器中符号“#”，#以及#后面的字符称之为hash，用window.location.hash读取；\n特点：hash虽然在URL中，但不被包括在HTTP请求中；用来指导浏览器动作，对服务端安全无用，hash不会重加载页面。\nhash 模式下，仅 hash 符号之前的内容会被包含在请求中，如 http://www.xxx.com，因此对于后端来说，即使没有做到对路由的全覆盖，也不会返回 404 错误。")])]),e._v(" "),v("li",[v("p",[e._v("history模式：history采用HTML5的新特性；且提供了两个新方法：pushState（），replaceState（）可以对浏览器历史记录栈进行修改，\n以及popState事件的监听到状态变更。history 模式下，前端的 URL 必须和实际向后端发起请求的 URL 一致，\n如 http://www.xxx.com/items/id。后端如果缺少对 /items/id 的路由处理，将返回 404 错误。Vue-Router 官网里如此描述：\n“不过这种模式要玩好，还需要后台配置支持……所以呢，你要在服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，\n则应该返回同一个 index.html 页面，这个页面就是你 app 依赖的页面。”")])])]),e._v(" "),v("h2",{attrs:{id:"六、vue路由的钩子函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#六、vue路由的钩子函数"}},[e._v("#")]),e._v(" 六、vue路由的钩子函数")]),e._v(" "),v("p",[e._v("首页可以控制导航跳转，beforeEach，afterEach等，一般用于页面title的修改。一些需要登录才能调整页面的重定向功能。\nbeforeEach主要有3个参数to，from，next：")]),e._v(" "),v("ul",[v("li",[e._v("to：route即将进入的目标路由对象，")]),e._v(" "),v("li",[e._v("from：route当前导航正要离开的路由")]),e._v(" "),v("li",[e._v("next：function一定要调用该方法resolve这个钩子。执行效果依赖next方法的调用参数。可以控制网页的跳转。")])]),e._v(" "),v("h2",{attrs:{id:"七、简单面试问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#七、简单面试问题"}},[e._v("#")]),e._v(" 七、简单面试问题")]),e._v(" "),v("ol",[v("li",[e._v("css只在当前组件起作用")])]),e._v(" "),v("p",[e._v("答：在style标签中写入scoped即可 例如：")]),v("style",{attrs:{scoped:""}}),v("p"),e._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[e._v("v-if 和 v-show 区")])]),e._v(" "),v("p",[e._v("答：v-if按照条件是否渲染，v-show是display的block或none；")]),e._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[e._v("$route和$router的区别")])]),e._v(" "),v("p",[e._v("答：$route是“路由信息对象”，包括path，params，hash，query，fullPath，matched，name等路由信息参数。\n而$router是“路由实例”对象包括了路由的跳转方法，钩子函数等。")]),e._v(" "),v("ol",{attrs:{start:"4"}},[v("li",[e._v("vue.js的两个核心是什么？")])]),e._v(" "),v("p",[e._v("答：数据驱动、组件系统")]),e._v(" "),v("ol",{attrs:{start:"5"}},[v("li",[e._v("vue几种常用的指令")])]),e._v(" "),v("p",[e._v("答：v-for 、 v-if 、v-bind、v-on、v-show、v-else")]),e._v(" "),v("ol",{attrs:{start:"6"}},[v("li",[e._v("vue常用的修饰符？")])]),e._v(" "),v("p",[e._v("答：.prevent: 提交事件不再重载页面；.stop: 阻止单击事件冒泡；.self: 当事件发生在该元素本身而不是子元素的时候会触发；.capture: 事件侦听，事件发生的时候会调用")]),e._v(" "),v("ol",{attrs:{start:"7"}},[v("li",[e._v("v-on 可以绑定多个方法吗？")])]),e._v(" "),v("p",[e._v("答：可以")]),e._v(" "),v("ol",{attrs:{start:"8"}},[v("li",[e._v("vue中 key 值的作用？")])]),e._v(" "),v("p",[e._v("答：当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用“就地复用”策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。key的作用主要是为了高效的更新虚拟DOM。")]),e._v(" "),v("ol",{attrs:{start:"9"}},[v("li",[e._v("什么是vue的计算属性？")])]),e._v(" "),v("p",[e._v("答：在模板中放入太多的逻辑会让模板过重且难以维护，在需要对数据进行复杂处理，且可能多次使用的情况下，尽量采取计算属性的方式。\n好处：")]),e._v(" "),v("ul",[v("li",[e._v("使得数据处理结构清晰；")]),e._v(" "),v("li",[e._v("依赖于数据，数据更新，处理结果自动更新；")]),e._v(" "),v("li",[e._v("计算属性内部this指向vm实例；")]),e._v(" "),v("li",[e._v("在template调用时，直接写计算属性名即可；")]),e._v(" "),v("li",[e._v("常用的是getter方法，获取数据，也可以使用set方法改变数据；")]),e._v(" "),v("li",[e._v("相较于methods，不管依赖的数据变不变，methods都会重新计算，但是依赖数据不变的时候computed从缓存中获取，不会重新计算。")])]),e._v(" "),v("ol",{attrs:{start:"10"}},[v("li",[e._v("vue等单页面应用及其优缺点\n答：")])]),e._v(" "),v("ul",[v("li",[v("p",[e._v("优点：Vue 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件，核心是一个响应的数据绑定系统。\nMVVM、数据驱动、组件化、轻量、简洁、高效、快速、模块友好。")])]),e._v(" "),v("li",[v("p",[e._v("缺点：不支持低版本的浏览器，最低只支持到IE9；不利于SEO的优化（如果要支持SEO，建议通过服务端来进行渲染组件）；\n第一次加载首页耗时相对长一些；不可以使用浏览器的导航按钮需要自行实现前进、后退。")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);