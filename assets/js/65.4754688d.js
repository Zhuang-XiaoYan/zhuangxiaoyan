(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{663:function(_,v,t){"use strict";t.r(v);var a=t(25),i=Object(a.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"数据库与缓存一致性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库与缓存一致性"}},[_._v("#")]),_._v(" 数据库与缓存一致性")]),_._v(" "),t("img",{attrs:{src:_.$withBase("/interview/cache00.png"),alt:"cache-db"}}),_._v(" "),t("h2",{attrs:{id:"_2-1-为什么要引入缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-为什么要引入缓存"}},[_._v("#")]),_._v(" 2.1 为什么要引入缓存？")]),_._v(" "),t("p",[_._v("如果你的业务处于起步阶段，流量非常小，那无论是读请求还是写请求，直接操作数据库即可，这时你的架构模型是这样的：")]),_._v(" "),t("img",{attrs:{src:_.$withBase("/interview/cache01.webp"),alt:"cache01"}}),_._v(" "),t("p",[_._v("但随着业务量的增长，你的项目请求量越来越大，这时如果每次都从数据库中读数据，那肯定会有性能问题。\n这个阶段通常的做法是，引入缓存来提高读性能，架构模型就变成了这样：")]),_._v(" "),t("img",{attrs:{src:_.$withBase("/interview/cache02.webp"),alt:"cache02"}}),_._v(" "),t("p",[_._v("当下优秀的缓存中间件，当属 Redis 莫属，它不仅性能非常高，还提供了很多友好的数据类型，可以很好地满足我们的业务需求。\n但引入缓存之后，你就会面临一个问题：之前数据只存在数据库中，现在要放到缓存中读取，具体要怎么存呢？")]),_._v(" "),t("p",[_._v("最简单直接的方案是"),t("strong",[_._v("全量数据刷到缓存中")]),_._v("：")]),_._v(" "),t("ul",[t("li",[_._v("数据库的数据，全量刷入缓存（不设置失效时间）")]),_._v(" "),t("li",[_._v("写请求只更新数据库，不更新缓存")]),_._v(" "),t("li",[_._v("启动一个定时任务，定时把数据库的数据，更新到缓存中")])]),_._v(" "),t("img",{attrs:{src:_.$withBase("/interview/cache03.webp"),alt:"cache03"}}),_._v(" "),t("p",[_._v("这个方案的优点是，所有读请求都可以直接命中缓存，不需要再查数据库，性能非常高。但缺点也很明显，有2个问题：")]),_._v(" "),t("ol",[t("li",[_._v("缓存利用率低：不经常访问的数据，还一直留在缓存中")]),_._v(" "),t("li",[_._v("数据不一致：因为是定时刷新缓存，缓存和数据库存在不一致（取决于定时任务的执行频率）")])]),_._v(" "),t("p",[_._v("所以，这种方案一般更适合业务体量小，且对数据一致性要求不高的业务场景。")]),_._v(" "),t("h2",{attrs:{id:"_2-2-缓存利用率和一致性问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-缓存利用率和一致性问题"}},[_._v("#")]),_._v(" 2.2 缓存利用率和一致性问题")]),_._v(" "),t("p",[_._v("想要缓存利用率最大化，我们很容易想到的方案是，缓存中只保留最近访问的热数据。但具体要怎么做呢？")]),_._v(" "),t("ul",[t("li",[_._v("写请求依旧只写数据库")]),_._v(" "),t("li",[_._v("读请求先读缓存，如果缓存不存在，则从数据库读取，并重建缓存")]),_._v(" "),t("li",[_._v("同时，写入缓存中的数据，都设置失效时间")])]),_._v(" "),t("img",{attrs:{src:_.$withBase("/interview/cache01.png"),alt:"cache01"}}),_._v(" "),t("p",[_._v("这样一来，缓存中不经常访问的数据，随着时间的推移，都会逐渐过期淘汰掉，最终缓存中保留的，都是经常被访问的热数据，缓存利用率得以最大化。")]),_._v(" "),t("p",[_._v("再来看数据一致性问题。要想保证缓存和数据库实时一致，那就不能再用定时任务刷新缓存了。\n所以，当数据发生更新时，我们不仅要操作数据库，还要一并操作缓存。具体操作就是，修改一条数据时，不仅要更新数据库，也要连带缓存一起更新。\n但数据库和缓存都更新，又存在先后问题，那对应的方案就有 2 个：")]),_._v(" "),t("ul",[t("li",[_._v("先更新缓存，后更新数据库")]),_._v(" "),t("li",[_._v("先更新数据库，后更新缓存")])]),_._v(" "),t("p",[_._v("先不考虑并发问题，正常情况下，无论谁先谁后，都可以让两者保持一致，但现在我们需要重点考虑异常情况。")]),_._v(" "),t("h3",{attrs:{id:"_2-2-1-先更新缓存-后更新数据库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-先更新缓存-后更新数据库"}},[_._v("#")]),_._v(" 2.2.1 先更新缓存，后更新数据库")]),_._v(" "),t("ul",[t("li",[_._v("如果缓存更新成功了，但数据库更新失败，那么此时缓存中是最新值，但数据库中是旧值。")]),_._v(" "),t("li",[_._v("虽然此时读请求可以命中缓存，拿到正确的值，但是，一旦缓存失效，就会从数据库中读取到旧值，重建缓存也是这个旧值。")]),_._v(" "),t("li",[_._v("这时用户会发现自己之前修改的数据又变回去了，对业务造成影响。")])]),_._v(" "),t("h3",{attrs:{id:"_2-2-2-先更新数据库-后更新缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-先更新数据库-后更新缓存"}},[_._v("#")]),_._v(" 2.2.2 先更新数据库，后更新缓存")]),_._v(" "),t("p",[_._v("如果数据库更新成功了，但缓存更新失败，那么此时数据库中是最新值，缓存中是旧值。\n之后的读请求读到的都是旧数据，只有当缓存失效后，才能从数据库中得到正确的值。\n这时用户会发现，自己刚刚修改了数据，但却看不到变更，一段时间过后，数据才变更过来，对业务也会有影响。\n可见，无论谁先谁后，但凡后者发生异常，就会对业务造成影响。")]),_._v(" "),t("h2",{attrs:{id:"_2-3-并发导致数据不一致性问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-并发导致数据不一致性问题"}},[_._v("#")]),_._v(" 2.3 并发导致数据不一致性问题")]),_._v(" "),t("p",[_._v("假设我们采用"),t("strong",[_._v("先更新数据库，再更新缓存")]),_._v("的方案，并且两步都可以成功执行的前提下，如果存在并发，情况会是怎样的呢？\n有线程 A 和线程 B 两个线程，需要更新同一条数据，会发生这样的场景:")]),_._v(" "),t("ul",[t("li",[_._v("线程 A 更新数据库（X = 1）")]),_._v(" "),t("li",[_._v("线程 B 更新数据库（X = 2）")]),_._v(" "),t("li",[_._v("线程 B 更新缓存（X = 2）")]),_._v(" "),t("li",[_._v("线程 A 更新缓存（X = 1）")])]),_._v(" "),t("p",[_._v("最终 X 的值在缓存中是 1，在数据库中是 2，发生不一致。也就是说，A 虽然先于 B 发生，但 B 操作数据库和缓存的时间，\n却要比 A 的时间短，执行时序发生错乱，最终这条数据结果是不符合预期的。同样地，采用先更新缓存，再更新数据库的方案，也会有类似问题。")]),_._v(" "),t("p",[_._v("那怎么解决这个问题呢？这里通常的解决方案是，加分布式锁\n两个线程要修改同一条数据，每个线程在改之前，先去申请分布式锁，拿到锁的线程才允许更新数据库和缓存，拿不到锁的线程，返回失败，等待下次重试。\n这么做的目的，就是为了只允许一个线程去操作数据和缓存，避免并发问题。除此之外，我们从缓存利用率的角度来评估这个方案，也是不太推荐的。\n这是因为每次数据发生变更，都无脑更新缓存，但是缓存中的数据不一定会被马上读取，这就会导致缓存中可能存放了很多不常访问的数据，浪费缓存资源。")]),_._v(" "),t("p",[_._v("而且很多情况下，写到缓存中的值，并不是与数据库中的值一一对应的，很有可能是先查询数据库，再经过一系列计算得出一个值，才把这个值才写到缓存中。\n由此可见，这种更新数据库 + 更新缓存的方案，不仅缓存利用率不高，还会造成机器性能的浪费。所以此时我们需要考虑另外一种方案:"),t("strong",[_._v("删除缓存")]),_._v("。")]),_._v(" "),t("h2",{attrs:{id:"消息队列重试设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#消息队列重试设计"}},[_._v("#")]),_._v(" 消息队列重试设计")]),_._v(" "),t("p",[_._v("删除缓存对应的方案也有 2 种：")]),_._v(" "),t("ul",[t("li",[_._v("先删除缓存，后更新数据库")]),_._v(" "),t("li",[_._v("先更新数据库，后删除缓存")])]),_._v(" "),t("p",[_._v("同样地，先来看第二步操作失败的情况。\n先删除缓存，后更新数据库，第二步操作失败，数据库没有更新成功，那下次读缓存发现不存在，则从数据库中读取，并重建缓存，此时数据库和缓存依旧保持一致。\n但如果是先更新数据库，后删除缓存，第二步操作失败，数据库是最新值，缓存中是旧值，发生不一致。所以，这个方案依旧存在问题。总之，和前面提到的问题类似，第二步失败依旧有不一致的风险。")]),_._v(" "),t("p",[t("strong",[_._v("先删除缓存，后更新数据库")])]),_._v(" "),t("ul",[t("li",[_._v("如果有 2 个线程要并发读写数据，可能会发生以下场景：")]),_._v(" "),t("li",[_._v("线程 A 要更新 X = 2（原值 X = 1）")]),_._v(" "),t("li",[_._v("线程 A 先删除缓存")]),_._v(" "),t("li",[_._v("线程 B 读缓存，发现不存在，从数据库中读取到旧值（X = 1）")]),_._v(" "),t("li",[_._v("线程 A 将新值写入数据库（X = 2）")]),_._v(" "),t("li",[_._v("线程 B 将旧值写入缓存（X = 1）")])]),_._v(" "),t("p",[_._v("最终 X 的值在缓存中是 1（旧值），在数据库中是 2（新值），发生不一致。可见，先删除缓存，后更新数据库，当发生读+写并发时，还是存在数据不一致的情况。")]),_._v(" "),t("p",[t("strong",[_._v("先更新数据库，后删除缓存")])]),_._v(" "),t("p",[_._v("旧是 2 个线程并发读写数据：")]),_._v(" "),t("ul",[t("li",[_._v("缓存中 X 不存在（数据库 X = 1）")]),_._v(" "),t("li",[_._v("线程 A 读取数据库，得到旧值（X = 1）")]),_._v(" "),t("li",[_._v("线程 B 更新数据库（X = 2)")]),_._v(" "),t("li",[_._v("线程 B 删除缓存")]),_._v(" "),t("li",[_._v("线程 A 将旧值写入缓存（X = 1）")])]),_._v(" "),t("p",[_._v("最终 X 的值在缓存中是 1（旧值），在数据库中是 2（新值），也发生不一致。这种情况理论来说是可能发生的，但实际真的有可能发生吗？其实概率很低，这是因为它必须满足 3 个条件：")]),_._v(" "),t("ul",[t("li",[_._v("缓存刚好已失效读请求")]),_._v(" "),t("li",[_._v("写请求并发更新数据库")]),_._v(" "),t("li",[_._v("删除缓存的时间（步骤 3-4），要比读数据库")]),_._v(" "),t("li",[_._v("写缓存时间短（步骤 2 和 5）")])]),_._v(" "),t("p",[_._v("仔细想一下，条件 3 发生的概率其实是非常低的。因为写数据库一般会先加锁，所以写数据库，通常是要比读数据库的时间更长的。\n这么来看，先更新数据库 + 再删除缓存的方案，是可以保证数据一致性的。所以，我们应该采用这种方案，来操作数据库和缓存。\n好，解决了并发问题，我们继续来看前面遗留的，第二步执行失败导致数据不一致的问题。")]),_._v(" "),t("p",[t("strong",[_._v("如何保证两步都执行成功？")])]),_._v(" "),t("p",[_._v("保证第二步成功执行，就是解决问题的关键。想一下，程序在执行过程中发生异常，最简单的解决办法是什么？答案是："),t("strong",[_._v("重试")]),_._v(",无论是先操作缓存，还是先操作数据库，但凡后者执行失败了，我们就可以发起重试，尽可能地去做补偿。")]),_._v(" "),t("p",[_._v("那这是不是意味着，只要执行失败，我们无脑重试就可以了呢？答案是否定的。现实情况往往没有想的这么简单，失败后立即重试的问题在于：")]),_._v(" "),t("ul",[t("li",[_._v("立即重试很大概率还会失败")]),_._v(" "),t("li",[_._v("重试次数设置多少才合理？")]),_._v(" "),t("li",[_._v("重试会一直占用这个线程资源，无法服务其它客户端请求")])]),_._v(" "),t("p",[_._v("看到了么，虽然我们想通过重试的方式解决问题，但这种同步重试的方案依旧不严谨。其实就是把重试请求写到消息队列中，然后由专门的消费者来重试，直到成功。\n或者更直接的做法，为了避免第二步执行失败，我们可以把操作缓存这一步，直接放到消息队列中，由消费者来操作缓存。\n到这里你可能会问，写消息队列也有可能会失败啊？而且，引入消息队列，这又增加了更多的维护成本，这样做值得吗？\n这个问题很好，但我们思考这样一个问题：如果在执行失败的线程中一直重试，还没等执行成功，此时如果项目重启了，那这次重试请求也就丢失了，那这条数据就一直不一致了。\n所以，这里我们必须把重试消息或第二步操作放到另一个服务中，这个服务用消息队列最为合适。这是因为消息队列的特性，正好符合我们的需求：")]),_._v(" "),t("ul",[t("li",[_._v("消息队列保证可靠性：写到队列中的消息，成功消费之前不会丢失（重启项目也不担心）")]),_._v(" "),t("li",[_._v("消息队列保证消息成功投递：下游从队列拉取消息，成功消费后才会删除消息，否则还会继续投递消息给消费者（符合我们重试的需求）")])]),_._v(" "),t("p",[_._v("至于写队列失败和消息队列的维护成本问题：")]),_._v(" "),t("ul",[t("li",[_._v("写队列失败：操作缓存和写消息队列，同时失败的概率其实是很小的")]),_._v(" "),t("li",[_._v("维护成本：我们项目中一般都会用到消息队列，维护成本并没有新增很多")])]),_._v(" "),t("p",[_._v("所以，引入消息队列来解决这个问题，是比较合适的。这时架构模型就变成了这样：")]),_._v(" "),t("img",{attrs:{src:_.$withBase("/interview/cache02.png"),alt:"cache02"}}),_._v(" "),t("h2",{attrs:{id:"订阅数据库变更日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#订阅数据库变更日志"}},[_._v("#")]),_._v(" 订阅数据库变更日志")]),_._v(" "),t("p",[_._v("那如果你确实不想在应用中去写消息队列，是否有更简单的方案，同时又可以保证一致性呢？方案还是有的，这就是近几年比较流行的解决方案：订阅数据库变更日志，再操作缓存。\n具体来讲就是，我们的业务应用在修改数据时，只需修改数据库，无需操作缓存。那什么时候操作缓存呢？这就和数据库的变更日志有关了。")]),_._v(" "),t("p",[_._v("拿 MySQL 举例，当一条数据发生修改时，MySQL 就会产生一条变更日志（Binlog），我们可以订阅这个日志，拿到具体操作的数据，然后再根据这条数据，去删除对应的缓存。")]),_._v(" "),t("img",{attrs:{src:_.$withBase("/interview/cache03.png"),alt:"cache03"}}),_._v(" "),t("p",[_._v("订阅变更日志，目前也有了比较成熟的开源中间件，例如阿里的 canal，使用这种方案的优点在于：")]),_._v(" "),t("ul",[t("li",[_._v("无需考虑写消息队列失败情况：只要写 MySQL 成功，Binlog 肯定会有")]),_._v(" "),t("li",[_._v("自动投递到下游队列：canal 自动把数据库变更日志投递给下游的消息队列")]),_._v(" "),t("li",[_._v("当然，与此同时，我们需要投入精力去维护 canal 的高可用和稳定性。\n如果你有留意观察很多数据库的特性，就会发现其实很多数据库都逐渐开始提供订阅变更日志的功能了，相信不远的将来，\n我们就不用通过中间件来拉取日志，自己写程序就可以订阅变更日志了，这样可以进一步简化流程。\n至此，我们可以得出结论，想要保证数据库和缓存一致性，推荐采用"),t("strong",[_._v("先更新数据库，再删除缓存方案，并配合消息队列或订阅变更日志")]),_._v("的方式来做。")])]),_._v(" "),t("h2",{attrs:{id:"主从库延迟和延迟双删问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主从库延迟和延迟双删问题"}},[_._v("#")]),_._v(" 主从库延迟和延迟双删问题")]),_._v(" "),t("p",[_._v("第一个问题，还记得前面讲到的先删除缓存，再更新数据库导致不一致的场景么？")]),_._v(" "),t("p",[_._v("2 个线程要并发读写数据，可能会发生以下场景：")]),_._v(" "),t("ul",[t("li",[_._v("线程 A 要更新 X = 2（原值 X = 1）")]),_._v(" "),t("li",[_._v("线程 A 先删除缓存")]),_._v(" "),t("li",[_._v("线程 B 读缓存，发现不存在，从数据库中读取到旧值（X = 1）")]),_._v(" "),t("li",[_._v("线程 A 将新值写入数据库（X = 2）")]),_._v(" "),t("li",[_._v("线程 B 将旧值写入缓存（X = 1）\n最终 X 的值在缓存中是 1（旧值），在数据库中是 2（新值），发生不一致。")])]),_._v(" "),t("p",[_._v("第二个问题：是关于读写分离 + 主从复制延迟情况下，缓存和数据库一致性的问题。\n如果使用先更新数据库，再删除缓存方案，其实也发生不一致：")]),_._v(" "),t("ul",[t("li",[_._v("线程 A 更新主库 X = 2（原值 X = 1）")]),_._v(" "),t("li",[_._v("线程 A 删除缓存")]),_._v(" "),t("li",[_._v("线程 B 查询缓存，没有命中，查询从库得到旧值（从库 X = 1）")]),_._v(" "),t("li",[_._v("从库同步完成（主从库 X = 2）")]),_._v(" "),t("li",[_._v("线程 B 将旧值写入缓存（X = 1）")])]),_._v(" "),t("p",[_._v("最终 X 的值在缓存中是 1（旧值），在主从库中是 2（新值），也发生不一致。看到了么？这 2 个问题的核心在于：缓存都被回种了旧值。\n那怎么解决这类问题呢？最有效的办法就是，"),t("strong",[_._v("把缓存删掉。")]),_._v(" 但是，不能立即删，而是需要延迟删，这就是业界给出的方案：缓存延迟双删策略。")]),_._v(" "),t("p",[_._v("按照延时双删策略，这 2 个问题的解决方案是这样的：")]),_._v(" "),t("p",[_._v("解决第一个问题：在线程 A 删除缓存、更新完数据库之后，先休眠一会，再删除一次缓存。\n解决第二个问题：线程 A 可以生成一条延时消息，写到消息队列中，消费者延时删除缓存。")]),_._v(" "),t("p",[_._v("这两个方案的目的，都是为了把缓存清掉，这样一来，下次就可以从数据库读取到最新值，写入缓存。但问题来了，这个延迟删除缓存，延迟时间到底设置要多久呢？")]),_._v(" "),t("ul",[t("li",[_._v("问题1：延迟时间要大于主从复制的延迟时间")]),_._v(" "),t("li",[_._v("问题2：延迟时间要大于线程 B 读取数据库 + 写入缓存的时间")])]),_._v(" "),t("p",[_._v("但是，这个时间在分布式和高并发场景下，其实是很难评估的。很多时候，我们都是凭借经验大致估算这个延迟时间，例如延迟 1-5s，只能尽可能地降低不一致的概率。\n所以你看，采用这种方案，也只是尽可能保证一致性而已，极端情况下，还是有可能发生不一致。\n所以实际使用中，我还是建议你采用先更新数据库，再删除缓存的方案，同时，要尽可能地保证主从复制不要有太大延迟，降低出问题的概率。")]),_._v(" "),t("h2",{attrs:{id:"缓存与数据库数据一致性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存与数据库数据一致性"}},[_._v("#")]),_._v(" 缓存与数据库数据一致性？")]),_._v(" "),t("p",[_._v("看到这里你可能会想，这些方案还是不够完美，我就想让缓存和数据库强一致，到底能不能做到呢？其实很难。\n要想做到强一致，最常见的方案是 2PC、3PC、Paxos、Raft 这类一致性协议，但它们的性能往往比较差，而且这些方案也比较复杂，还要考虑各种容错问题。")]),_._v(" "),t("p",[_._v("相反，这时我们换个角度思考一下，我们引入缓存的目的是什么？\n没错，性能。一旦我们决定使用缓存，那必然要面临一致性问题。性能和一致性就像天平的两端，无法做到都满足要求。\n而且，就拿我们前面讲到的方案来说，当操作数据库和缓存完成之前，只要有其它请求可以进来，都有可能查到中间状态的数据。\n所以如果非要追求强一致，那必须要求所有更新操作完成之前期间，不能有任何请求进来。")]),_._v(" "),t("p",[_._v("虽然我们可以通过加分布锁的方式来实现，但我们也要付出相应的代价，甚至很可能会超过引入缓存带来的性能提升。\n所以，既然决定使用缓存，就必须容忍一致性问题，我们只能尽可能地去降低问题出现的概率。\n同时我们也要知道，缓存都是有失效时间的，就算在这期间存在短期不一致，我们依旧有失效时间来兜底，这样也能达到最终一致。")])])}),[],!1,null,null,null);v.default=i.exports}}]);