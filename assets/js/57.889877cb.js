(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{646:function(s,t,a){"use strict";a.r(t);var e=a(25),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"vuepress"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuepress"}},[s._v("#")]),s._v(" VuePress")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("VuePress 由两部分组成：第一部分是一个极简静态网站生成器，它包含由 Vue 驱动的主题系统和插件 API，\n另一个部分是为书写技术文档而优化的默认主题，它的诞生初衷是为了支持 Vue 及其子项目的文档需求。\n每一个由 VuePress 生成的页面都带有预渲染好的 HTML，也因此具有非常好的加载性能和搜索引擎优化（SEO）。\n同时，一旦页面被加载，Vue 将接管这些静态内容，并将其转换成一个完整的单页应用（SPA），其他的页面则会只在用户浏览到的时候才按需加载。")]),s._v(" "),a("h2",{attrs:{id:"vuepress的工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuepress的工作原理"}},[s._v("#")]),s._v(" VuePress的工作原理")]),s._v(" "),a("p",[s._v("事实上，一个 VuePress 网站是一个由 Vue ()、Vue Router () 和 webpack\n() 驱动的单页应用。如果你以前使用过 Vue 的话，当你在开发一个自定义主题的时候，你会感受到非常熟悉的开发体验，\n你甚至可以使用 Vue DevTools 去调试你的自定义主题。在构建时，我们会为应用创建一个服务端渲染（SSR）的版本，\n然后通过虚拟访问每一条路径来渲染对应的HTML。这种做法的灵感来源于 Nuxt() 的 nuxt generate 命令，\n以及其他的一些项目，比如 Gatsby ()。")]),s._v(" "),a("h2",{attrs:{id:"vuepress内部链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuepress内部链接"}},[s._v("#")]),s._v(" VuePress内部链接")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[s._v("[Home](/) "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("\x3c!-- 跳转到根部的 README.md --\x3e")]),s._v("\n[foo](/foo/) "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("\x3c!-- 跳转到 foo 文件夹的 index.html --\x3e")]),s._v("\n[foo heading](./#heading) "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("\x3c!-- 跳转到 foo/index.html 的特定标题位置 --\x3e")]),s._v("\n[bar - three](../bar/three.md) "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("\x3c!-- 具体文件可以使用 .md 结尾（推荐） --\x3e")]),s._v("\n[bar - four](../bar/four.html) "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("\x3c!-- 也可以用 .html --\x3e")]),s._v("\n")])])])]),s._v(" "),a("h2",{attrs:{id:"vuepress自定义容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuepress自定义容器"}},[s._v("#")]),s._v(" VuePress自定义容器")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),a("p",[s._v("这是一个提示")])]),s._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[s._v("WARNING")]),s._v(" "),a("p",[s._v("这是一个警告")])]),s._v(" "),a("div",{staticClass:"custom-block danger"},[a("p",{staticClass:"custom-block-title"},[s._v("WARNING")]),s._v(" "),a("p",[s._v("这是一个危险警告")])]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("DETAILS")]),s._v(" "),a("p",[s._v("这是一个详情块，在 IE / Edge 中不生效")])]),s._v(" "),a("h2",{attrs:{id:"vuepressgithub表格"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuepressgithub表格"}},[s._v("#")]),s._v(" VuePressGitHub表格")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("Tables")]),s._v(" "),a("th",{staticStyle:{"text-align":"center"}},[s._v("Are")]),s._v(" "),a("th",{staticStyle:{"text-align":"right"}},[s._v("Cool")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("col 3 is")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("right-aligned")]),s._v(" "),a("td",{staticStyle:{"text-align":"right"}},[s._v("$1600")])]),s._v(" "),a("tr",[a("td",[s._v("col 2 is")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("centered")]),s._v(" "),a("td",{staticStyle:{"text-align":"right"}},[s._v("$12")])]),s._v(" "),a("tr",[a("td",[s._v("zebra stripes")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("are neat")]),s._v(" "),a("td",{staticStyle:{"text-align":"right"}},[s._v("$1")])])])]),s._v(" "),a("h2",{attrs:{id:"vuepress表情引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuepress表情引用"}},[s._v("#")]),s._v(" VuePress表情引用")]),s._v(" "),a("p",[s._v("你可以在这个"),a("a",{attrs:{href:"https://github.com/markdown-it/markdown-it-emoji/blob/master/lib/data/full.json",target:"_blank",rel:"noopener noreferrer"}},[s._v("列表"),a("OutboundLink")],1),s._v("找到所有可用的表情。")]),s._v(" "),a("h2",{attrs:{id:"vuepress静态资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuepress静态资源"}},[s._v("#")]),s._v(" VuePress静态资源")]),s._v(" "),a("p",[s._v("所有的 Markdown 文件都会被 webpack 编译成 Vue 组件，因此你可以，并且应该更倾向于使用相对路径（Relative URLs）来引用所有的静态资源：")]),s._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[s._v("![An image](./image.png)\n")])])]),a("p",[s._v("同样地，这在 *.vue 文件的模板中一样可以工作，图片将会被 url-loader 和 file-loader 处理，在运行生成静态文件的构建任务时，文件会被复制到正确的位置。")]),s._v(" "),a("p",[s._v("除此之外，你也使用 ~ 前缀来明确地指出这是一个 webpack 的模块请求，这将允许你通过 webpack 别名来引用文件或者 npm 的依赖：")]),s._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[s._v("![Image from alias](~@alias/image.png)\n![Image from dependency](~some-dependency/image.png)\n")])])]),a("h2",{attrs:{id:"vuepress文件夹设置别名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuepress文件夹设置别名"}},[s._v("#")]),s._v(" VuePress文件夹设置别名")]),s._v(" "),a("p",[s._v("Webpack 的别名可以通过 .vuepress/config.js 中 configureWebpack 来配置，如：")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    configureWebpack"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        resolve"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            alias"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'@alias'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'path/to/some/dir'")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("h2",{attrs:{id:"vuepress公共文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuepress公共文件"}},[s._v("#")]),s._v(" VuePress公共文件")]),s._v(" "),a("p",[s._v("有时，你可能需要提供一个静态资源，但是它们并不直接被你的任何一个 markdown 文件或者主题组件引用 —— 举例来说，favicons 和 PWA 的图标，\n在这种情形下，你可以将它们放在 .vuepress/public 中， 它们最终会被复制到生成的静态文件夹中。")]),s._v(" "),a("h2",{attrs:{id:"vuepress基础路径"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuepress基础路径"}},[s._v("#")]),s._v(" VuePress基础路径")]),s._v(" "),a("p",[s._v('如果你的网站会被部署到一个非根路径，你将需要在 .vuepress/config.js 中设置 base，举例来说，\n如果你打算将你的网站部署到 https://foo.github.io/bar/，那么 base 的值就应该被设置为 "/bar/" (应当总是以斜杠开始，并以斜杠结束)。')]),s._v(" "),a("p",[s._v("有了基础路径（Base URL），如果你希望引用一张放在 .vuepress/public 中的图片，你需要使用这样路径：/bar/image.png，然而，\n一旦某一天你决定去修改 base，这样的路径引用将会显得异常脆弱。为了解决这个问题，\nVuePress 提供了内置的一个 helper $withBase（它被注入到了 Vue 的原型上），可以帮助你生成正确的路径：")]),s._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("img")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v(":src")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("$withBase("),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'")]),s._v("/foo.png"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'")]),s._v(")"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("alt")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n")])])]),a("p",[s._v("值得一提的是，你不仅可以在你的 Vue 组件中使用上述的语法，在 Markdown 文件中亦是如此。")]),s._v(" "),a("p",[s._v("最后补充一句，一个 base 路径一旦被设置，它将会自动地作为前缀插入到 .vuepress/config.js 中所有以 / 开始的资源路径中.")]),s._v(" "),a("h2",{attrs:{id:"vuepress在markdown中使用vue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuepress在markdown中使用vue"}},[s._v("#")]),s._v(" VuePress在Markdown中使用Vue")]),s._v(" "),a("p",[s._v("当你在开发一个VuePress 应用时，由于所有的页面在生成静态HTML时都需要通过Node.js服务端渲染，因此所有的Vue相关代码都应当遵循 编写通用代码的要求。\n简而言之，请确保只在 beforeMount 或者 mounted 访问浏览器 / DOM 的 API。\n如果你正在使用，或者需要展示一个对于 SSR 不怎么友好的组件（比如包含了自定义指令），你可以将它们包裹在内置的ClientOnly组件中：\n请注意，这并不能解决一些组件或库在导入时就试图访问浏览器 API 的问题 —— 如果需要使用这样的组件或库，你需要在合适的生命周期钩子中动态导入它们：\n如果你的模块通过 export default 导出一个 Vue 组件，那么你可以动态注册它：")]),s._v(" "),a("h2",{attrs:{id:"vuepress项目部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuepress项目部署"}},[s._v("#")]),s._v(" VuePress项目部署")]),s._v(" "),a("p",[s._v("下述的指南基于以下条件：")]),s._v(" "),a("ul",[a("li",[s._v("文档放置在项目的 docs 目录中；")]),s._v(" "),a("li",[s._v("使用的是默认的构建输出位置；")]),s._v(" "),a("li",[s._v("VuePress 以本地依赖的形式被安装到你的项目中，并且配置了如下的 npm scripts:")])]),s._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"scripts"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"docs:build"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"vuepress build docs"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("h2",{attrs:{id:"vuepress在githubpages部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuepress在githubpages部署"}},[s._v("#")]),s._v(" VuePress在GitHubPages部署")]),s._v(" "),a("ol",[a("li",[s._v("在 docs/.vuepress/config.js 中设置正确的 base。")]),s._v(" "),a("li",[s._v("在你的项目中，创建一个如下的 deploy.sh 文件（请自行判断去掉高亮行的注释）:")])]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/usr/bin/env sh")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 确保脚本抛出遇到的错误")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" -e\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 生成静态文件")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" run docs:build\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 进入生成的文件夹")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" docs/.vuepress/dist\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果是发布到自定义域名")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# echo 'www.example.com' > CNAME")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" init\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" -A\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'deploy'")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果发布到 https://<USERNAME>.github.io")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# git push -f git@github.com:<USERNAME>/<USERNAME>.github.io.git master")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果发布到 https://<USERNAME>.github.io/<REPO>")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# git push -f git@github.com:<USERNAME>/<REPO>.git master:gh-pages")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" -\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),a("p",[s._v("你可以在你的持续集成的设置中，设置在每次 push 代码时自动运行上述脚本。")])]),s._v(" "),a("h2",{attrs:{id:"githubpages-travisci部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#githubpages-travisci部署"}},[s._v("#")]),s._v(" GitHubPages TravisCI部署")]),s._v(" "),a("ol",[a("li",[s._v("在 docs/.vuepress/config.js 中设置正确的 base。")]),s._v(" "),a("li",[s._v("在项目的根目录创建一个名为 .travis.yml 的文件；")]),s._v(" "),a("li",[s._v("在本地执行 yarn 或 npm install 并且提交生成的 lock 文件（即 yarn.lock 或 package-lock.json）；")]),s._v(" "),a("li",[s._v("使用 GitHub Pages 部署提供程序模板并遵循 Travis 文档")])]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("language: node_js\nnode_js:\n    - lts/*\ninstall:\n  - "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("yarn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# npm ci")]),s._v("\nscript:\n  - "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("yarn")]),s._v(" docs:build "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# npm run docs:build")]),s._v("\ndeploy:\n  provider: pages\n  skip_cleanup: "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n  local_dir: docs/.vuepress/dist\n  github_token: "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$GITHUB_TOKEN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在 GitHub 中生成，用于允许 Travis 向你的仓库推送代码。在 Travis 的项目设置页面进行配置，设置为 secure variable")]),s._v("\n  keep_history: "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n  on:\n    branch: master\n")])])]),a("h2",{attrs:{id:"netlify部署vuepress项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#netlify部署vuepress项目"}},[s._v("#")]),s._v(" Netlify部署VuePress项目")]),s._v(" "),a("ol",[a("li",[s._v("在 Netlify 中, 创建一个新的 GitHub 项目，使用以下设置：")])]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("Build Command: "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("yarn")]),s._v(" docs:build 或者 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" run docs:build\nPublish directory: docs/.vuepress/dist\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[s._v("点击 deploy 按钮！")])]),s._v(" "),a("h2",{attrs:{id:"surge部署vuepress项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#surge部署vuepress项目"}},[s._v("#")]),s._v(" Surge部署VuePress项目")]),s._v(" "),a("ol",[a("li",[s._v("首先，假设你已经安装了 surge")]),s._v(" "),a("li",[s._v("运行 yarn docs:build 或者 npm run docs:build；")]),s._v(" "),a("li",[s._v("想要使用 surge 来部署，你可以运行： surge docs/.vuepress/dist；")]),s._v(" "),a("li",[s._v("你也可以通过 surge docs/.vuepress/dist yourdomain.com 来部署到 自定义域名")])]),s._v(" "),a("h2",{attrs:{id:"heroku部署vuepress项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#heroku部署vuepress项目"}},[s._v("#")]),s._v(" Heroku部署VuePress项目")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("首先安装 Heroku CLI")])]),s._v(" "),a("li",[a("p",[s._v("在"),a("a",{attrs:{href:"https://signup.heroku.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Heroku"),a("OutboundLink")],1),s._v("注册一个 Heroku 账号；")])]),s._v(" "),a("li",[a("p",[s._v("运行 heroku login 并填写你的 Heroku 证书：")])])]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("heroku login\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[s._v("在你的项目根目录中，创建一个名为 static.json 的文件，并包含下述内容：")])]),s._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"root"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"./docs/.vuepress/dist"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("ol",{attrs:{start:"5"}},[a("li",[s._v("配置 Heroku 的 git 远程仓库：")])]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 版本变化")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" init\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"My site ready for deployment."')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 以指定的名称创建一个新的 heroku 应用")]),s._v("\nheroku apps:create example\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 为静态网站设置构建包")]),s._v("\nheroku buildpacks:set https://github.com/heroku/heroku-buildpack-static.git\n")])])]),a("ol",{attrs:{start:"6"}},[a("li",[s._v("部署你的网站：")])]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 发布网站")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" push heroku master\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 打开浏览器查看 Helku CI 的 dashboard")]),s._v("\nheroku "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("open")]),s._v("\n")])])]),a("p",[a("strong",[s._v("博文参考")])]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.vuepress.cn/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Vuepress"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=r.exports}}]);